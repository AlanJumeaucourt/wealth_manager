from typing import Any, Callable, Dict, List, Optional, Type, TypeVar, Union, overload
from flask import Flask, Response
from werkzeug.datastructures import Headers

T = TypeVar('T')

class Namespace:
    def __init__(self, name: str, description: str = "", path: Optional[str] = None) -> None: ...
    
    def route(self, *urls: str, **kwargs: Any) -> Callable[[Type[Resource]], Type[Resource]]: ...
    
    def model(self, name: str, model: Dict[str, Any]) -> Any: ...
    
    def expect(self, model: Any) -> Callable[[T], T]: ...
    
    def doc(self, shortcut: Optional[str] = None, **kwargs: Any) -> Callable[[T], T]: ...

class Resource:
    def get(self, *args: Any, **kwargs: Any) -> Union[Response, tuple[Any, int]]: ...
    def post(self, *args: Any, **kwargs: Any) -> Union[Response, tuple[Any, int]]: ...
    def put(self, *args: Any, **kwargs: Any) -> Union[Response, tuple[Any, int]]: ...
    def delete(self, *args: Any, **kwargs: Any) -> Union[Response, tuple[Any, int]]: ...

class Api:
    def __init__(
        self,
        app: Optional[Flask] = None,
        version: str = "1.0",
        title: str = "API",
        description: str = "",
        doc: str = "/doc",
        **kwargs: Any
    ) -> None: ...
    
    def add_namespace(self, ns: Namespace, path: Optional[str] = None) -> None: ...

class fields:
    @staticmethod
    def String(required: bool = False, description: str = "") -> Any: ...
    @staticmethod
    def Integer(required: bool = False, description: str = "") -> Any: ...
    @staticmethod
    def Float(required: bool = False, description: str = "") -> Any: ...
    @staticmethod
    def Boolean(required: bool = False, description: str = "") -> Any: ...
    @staticmethod
    def DateTime(required: bool = False, description: str = "") -> Any: ...
