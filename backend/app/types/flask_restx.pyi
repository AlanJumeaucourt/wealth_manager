from collections.abc import Callable
from typing import Any, TypeVar

from flask import Flask, Response

T = TypeVar("T")

class Namespace:
    def __init__(
        self, name: str, description: str = "", path: str | None = None
    ) -> None: ...
    def route(
        self, *urls: str, **kwargs: Any
    ) -> Callable[[type[Resource]], type[Resource]]: ...
    def model(self, name: str, model: dict[str, Any]) -> Any: ...
    def expect(self, model: Any) -> Callable[[T], T]: ...
    def doc(self, shortcut: str | None = None, **kwargs: Any) -> Callable[[T], T]: ...

class Resource:
    def get(self, *args: Any, **kwargs: Any) -> Response | tuple[Any, int]: ...
    def post(self, *args: Any, **kwargs: Any) -> Response | tuple[Any, int]: ...
    def put(self, *args: Any, **kwargs: Any) -> Response | tuple[Any, int]: ...
    def delete(self, *args: Any, **kwargs: Any) -> Response | tuple[Any, int]: ...

class Api:
    def __init__(
        self,
        app: Flask | None = None,
        version: str = "1.0",
        title: str = "API",
        description: str = "",
        doc: str = "/doc",
        **kwargs: Any,
    ) -> None: ...
    def add_namespace(self, ns: Namespace, path: str | None = None) -> None: ...

class fields:
    @staticmethod
    def String(required: bool = False, description: str = "") -> Any: ...
    @staticmethod
    def Integer(required: bool = False, description: str = "") -> Any: ...
    @staticmethod
    def Float(required: bool = False, description: str = "") -> Any: ...
    @staticmethod
    def Boolean(required: bool = False, description: str = "") -> Any: ...
    @staticmethod
    def DateTime(required: bool = False, description: str = "") -> Any: ...
