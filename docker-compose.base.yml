version: "3.8"

x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

x-deploy: &default-deploy
  resources:
    limits:
      memory: 512M
      cpus: '0.5'

services:
  web_application:
    build:
      context: ./web_application
      dockerfile: Dockerfile
      args:
        - VITE_API_URL=${API_URL}
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - VITE_API_URL=${API_URL}
      - VIRTUAL_HOST=${DOMAIN}
      - VIRTUAL_PORT=80
      - LETSENCRYPT_HOST=${DOMAIN}
    restart: unless-stopped
    expose:
      - "80"
    networks:
      - app-network
      - nginx-proxy-network
    depends_on:
      flask_backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy: *default-deploy
    logging: *default-logging

  flask_backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - sqlite_data:/app/instance:rw
    environment:
      - FLASK_APP=app.py
      - FLASK_ENV=${FLASK_ENV:-production}
      - FLASK_DEBUG=${FLASK_DEBUG:-0}
      - PYTHONUNBUFFERED=1
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ACCESS_TOKEN_EXPIRES=3600
      - JWT_REFRESH_TOKEN_EXPIRES=2592000
      - SQLITE_DB_PATH=/app/instance/database.sqlite
      - ENVIRONMENT=${ENVIRONMENT:-production}
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    logging: *default-logging

networks:
  app-network:
    driver: bridge
  nginx-proxy-network:
    external: true
    name: nginx-proxy-network

volumes:
  sqlite_data:
    driver: local
